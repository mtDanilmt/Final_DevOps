- hosts: db_host
  vars_files:
    - ./vars.yml
  tasks:
    - name: Install PostgreSQL
      become: yes
      package:
        name: postgresql
        state: latest

    - name: Restart PostgreSQL
      become: yes
      service:
        name: postgresql
        state: restarted

    - name: Enable PostgreSQL service
      become: true
      systemd:
        name: postgresql
        state: started
        enabled: yes
        daemon-reload: yes

    - name: Set password for "{{ DB_USER }}"
      become: yes
      become_user: postgres
      shell: "psql -c \"ALTER USER {{ DB_USER }} WITH PASSWORD '{{ DB_PASSWORD }}';\""

    - name: Check if exists
      command: "psql -U {{ DB_USER }} -lqt | cut -d \\| -f 1 | grep -qw \"{{ DB_DATABASE }}\""
      ignore_errors: true
      register: db_check_result
      failed_when: false

    - name: Create PostgreSQL db
      become: yes
      become_user: postgres
      command: "createdb -U {{ DB_USER }} {{ DB_DATABASE }}"
      when: db_check_result.rc != 0
      failed_when: false
      register: db_created

    - name: Edit pg_hba
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "all"
        users: "all"
        source: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Edit pg_hba
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "replication"
        users: "all"
        source: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Install psycopg2 for PostgreSQL
      become: yes
      apt:
        name: python3-psycopg2
        state: present
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Create arch dir
      become: yes
      file:
        path: /oracle/pg_data/archive/
        state: directory

    - name: Edit postgresql.conf
      become: yes
      become_user: postgres
      community.postgresql.postgresql_set:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
      with_dict:
        max_connections: '100'
        listen_addresses: '*'
        log_replication_commands: 'on'
        unix_socket_directories: '/var/run/postgresql'
        logging_collector: 'on'
        log_directory: '/var/log/postgresql'
        log_filename: 'postgresql.log'
        log_file_mode: '0664'
        wal_level: 'replica'
        max_wal_senders: '10'
        wal_log_hints: 'on'
        archive_mode: 'on'
        archive_command: 'cp %p /oracle/pg_data/archive/%f'
        password_encryption: 'scram-sha-256'

    - name: Create replication user '{{ DB_REPL_USER }}' with password '{{ DB_REPL_PASSWORD }}'
      become: yes
      become_user: postgres
      command: "psql -c \"CREATE USER {{ DB_REPL_USER }} REPLICATION LOGIN ENCRYPTED PASSWORD '{{ DB_REPL_PASSWORD }}';\""
      ignore_errors: yes

    - name: Copy init.sql
      copy:
        src: "init.sql"
        dest: "~/init.sql"

    - name: Read init.sql
      slurp:
        src: init.sql
      register: init

    - name: initialization
      become: yes
      become_user: postgres
      ignore_errors: yes
      postgresql_query:
        db: db_information
        query: "{{ init.content | b64decode }}"
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
      when: db_created.changed


- hosts: db_repl_host
  vars_files:
    - ./vars.yml
  tasks:
    - name: Install PostgreSQL
      become: yes
      package:
        name: postgresql
        state: latest

    - name: Enable PostgreSQL service
      become: true
      systemd:
        name: postgresql
        state: started
        enabled: yes
        daemon-reload: yes

    - name: Clear directory
      become: yes
      ansible.builtin.file:
        state: absent
        path: /var/lib/postgresql/data

    - name: Replication
      become: yes
      become_user: postgres
      environment:
        PGUSER: "{{ DB_USER }}"
        PGPASSWORD: "{{ DB_PASSWORD }}"
      shell: pg_basebackup --pgdata=/var/lib/postgresql/data -R --host="{{ DB_HOST }}" --port="{{ DB_PORT }}"

- hosts: bot_host
  tasks:
    - name: Install Git & pip3
      become: yes
      apt:
        pkg:
          - git
          - python3-pip
          - libpq-dev

    - name: Create project dir
      become: yes
      file:
        path: /home/ansible/bot/
        state: directory

    - name: Clone reporiz
      become: yes
      git:
        repo: "https://github.com/mtDanilmt/TgBot"
        dest: "/home/ansible/bot/"
        version: main

    - name: Install Python modules
      become: yes
      pip:
        requirements: "/home/ansible/bot/requirements.txt"

    - name: Copy .env to BOT_HOST
      become: yes
      copy:
        src: ".env"
        dest: "/home/ansible/bot/.env"

    - name: Start bot
      become: yes
      shell: python3 /home/ansible/bot/main.py
